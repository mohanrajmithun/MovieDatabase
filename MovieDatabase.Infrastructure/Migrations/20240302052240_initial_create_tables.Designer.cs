// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieDatabase.Infrastructure;

#nullable disable

namespace MovieDatabase.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240302052240_initial_create_tables")]
    partial class initial_create_tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieDatabase.core.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Neo-Noir"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Action"
                        });
                });

            modelBuilder.Entity("MovieDatabase.core.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A young, aspiring filmmaker falls in love with a girl who moves into the house above his, but her sophisticated nature does more harm than good to him",
                            Name = "Vinnathandi Varuvaiya",
                            rating = 8.0999999999999996
                        },
                        new
                        {
                            Id = 2,
                            Description = "A gritty crime thriller exploring the moral conflict between a police officer and a gangster",
                            Name = "Vikram Vedha",
                            rating = 8.5999999999999996
                        },
                        new
                        {
                            Id = 3,
                            Description = "A dark comedy-drama intertwining multiple stories of identity and acceptance in Chennai",
                            Name = "Super Deluxe",
                            rating = 8.4000000000000004
                        },
                        new
                        {
                            Id = 4,
                            Description = "A raw and intense action drama depicting the struggle of a oppressed family against the tyranny of a powerful landlord.",
                            Name = "Asuran",
                            rating = 8.5
                        });
                });

            modelBuilder.Entity("MovieDatabase.core.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 6
                        },
                        new
                        {
                            MovieId = 3,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 4,
                            GenreId = 4
                        });
                });

            modelBuilder.Entity("MovieDatabase.core.MovieGenre", b =>
                {
                    b.HasOne("MovieDatabase.core.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDatabase.core.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDatabase.core.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("MovieDatabase.core.Movie", b =>
                {
                    b.Navigation("MovieGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
